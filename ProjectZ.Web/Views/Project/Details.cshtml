@using System.Web.Script.Serialization
@using ProjectZ.Web.Models
@model ProjectZ.Web.ViewModels.ProjectViewModel

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="wrapper" id="project-wrapper">
    <nav class="nav">
        <ul>
            <li class="active">
                <p>Overview</p>
            </li>
            <li><a href="releases">Releases @Html.Raw(Model.NumberOfReleases > 0 ? string.Format("<span class='badge'>{0}</span>", Model.NumberOfReleases) : "")</a></li>
            <li><a href="polls">Polls</a></li>
            <li><a href="issues">Issues @Html.Raw(Model.NumberOfIssues > 0 ? string.Format("<span class='badge'>{0}</span>", Model.NumberOfIssues) : "")</a></li>
        </ul>
    </nav>
    <div class="inner">
        <div class="content">
            <h1>@Model.Project.Name</h1>
            <p>@Html.Raw(Model.Project.Description.Replace("\n", "<br />"))</p>
        </div>
        <div class="sidebar">
            <div class="text-center">
                <img src="@Model.Project.GetLogo(imageType: Project.LogoSize.Normal)" class="user-image"/>
            </div>

            <h3>Team</h3>

            <div class="menu">
                <ul class="unstyled">
                    @foreach (var member in Model.Project.Admins)
                    {
                        <li class="team-member">
                            <img src="@(member.GetImage())" class="user-image"/>
                            <div>
                                <p><a href="/user/@(member.Slug)/details" style="display: block;">@member.FirstName @member.LastName</a></p>
                                <p>@member.Role</p>
                            </div>
                        </li>
                    }
                </ul>
            </div>
            @if (Model.IsPageAdmin)
            {
                <div class="admin-wrapper">
                    <button class="btn btn-default btn-block btn-lg">Manage team</button>
                </div>
            }
            <div class="follow-wrapper">
                <p><span data-bind="text: followers"></span>&nbsp;people are following this project</p>
                @if (Context.User.Identity.IsAuthenticated)
                {
                    <button data-bind="click: toggleFollow" class="btn btn-primary btn-block btn-lg"><span data-bind="    text: following() ? 'Unfollow' : 'Follow'"></span></button>                
                }

            </div>
        </div>
    </div>
</div>


@section scripts
{
    <script type="text/javascript">

        
        var projectConfig = {
            projectId: '@(Model.Project.Id)',
            followers: @Model.Followers,
            following: @Model.Following.ToString().ToLower()
            };

        var projectModel = function () {
            var priv = {};
            var pub = {};


            pub.Init = function (config) {
                var viewModel = new priv.ViewModel(config);
                return viewModel;
            };

            priv.ViewModel = function (config) {
                var inner = {};
                inner.followers = ko.observable(config.followers);
                inner.following = ko.observable(config.following);
            
                inner.toggleFollow = function () {
                    if(!inner.following()) {
                        inner.follow();
                    } else {
                        inner.unFollow();
                    }
                };


                inner.follow = function() {
                    inner.followers(parseInt(inner.followers()) + 1);
                    inner.following(true);
                    priv.follow(config.projectId)
                        .done(function(response) {
                            if (!response) {
                                inner.followers(parseInt(inner.followers()) - 1);
                                inner.following(false);
                            }
                        })
                        .fail(function(errorResponse) {

                        });
                };
                
                inner.unFollow = function() {
                    inner.followers(parseInt(inner.followers()) - 1);
                    inner.following(false);
                    priv.unFollow(config.projectId)
                        .done(function(response) {
                            if (!response) {
                                inner.followers(parseInt(inner.followers()) + 1);
                                inner.following(true);
                            }
                        })
                        .fail(function(errorResponse) {

                        });
                };

                return inner;
            };

            priv.follow = function (projectId) {
                return $.ajax({
                    method:'post',
                    url: '/Project/Follow',
                    data: { projectId: projectId }
                });
            };
            
            priv.unFollow = function (projectId) {
                return $.ajax({
                    method:'post',
                    url: '/Project/UnFollow',
                    data: { projectId: projectId }
                });
            };

            return pub;
        }();

        $(function () {
            ko.applyBindings(new projectModel.Init(projectConfig), document.getElementById("project-wrapper"));
        });
    </script>
}
