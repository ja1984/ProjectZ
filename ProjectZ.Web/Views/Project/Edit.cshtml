@model ProjectZ.Web.Models.Project
@{
    ViewBag.Title = "Edit";
}
<div id="edit-project-wrapper">
    <h2>
        <div class="project-logo" data-toggle="modal" data-target="#logo-upload">
            <img src="@Model.GetLogo()" alt="@Model.Name" title="@Model.Name" class="user-image" data-bind="attr: { 'src': logoUrl }">
            <i class="fa fa-upload fa-1x"></i>
        </div>

        @Model.Name
    </h2>

    <form method="post" action="/User/Edit">

        <div class="form-row-group">
            <div class="form-row half">
                <div class="inner">
                    @Model.Name
                </div>
            </div>
            <div class="form-row half">
                <div class="inner">
                </div>
            </div>
        </div>
        <div class="form-row-group">
            <div class="form-row half">
                <div class="inner">
                </div>
            </div>
            <div class="form-row half">
                <div class="inner">
                </div>
            </div>
        </div>
        <div class="form-row-group">
            <div class="form-row half">
                <div class="inner">
                    @Html.TextAreaFor(x => x.Description, new { @class = "fill", placeholder = "Description", rows = "7" })
                </div>
            </div>
            <div>
                <div class="form-row half">
                    <div class="inner">
                        @*@Html.TextBoxFor(x => x.User.GitHub, new { @class = "fill", placeholder = "Github username" })*@
                    </div>
                </div>
                <div class="form-row half">
                    <div class="inner">
                        @*                    <label class="fill" style="font-weight: normal; margin: 0; cursor: pointer;">
                        @Html.CheckBoxFor(x => x.User.DisplayEmail)Show my email
                    </label>*@
                    </div>
                </div>
            </div>
        </div>
        <div class="text-right">
            <button type="submit" class="button button-success button-large" style="margin-right: 8px;"><span>Save changes</span></button>
        </div>
    </form>

    <div class="edit-polls">
        <h4>Polls
            <button class="button button-success pull-right" data-bind="click: newPoll"><span>New poll</span></button>

        </h4>

        <form id="polls-form" data-bind="with: selectedPoll">
            <input type="text" class="fill" placeholder="Title" data-bind="value: title" />
            <!-- ko foreach: options-->
            <div style="position: relative;">
                <input type="text" class="fill" data-bind="value: title, attr: { 'Placeholder': 'Option #' + $index() }" />
                <i class="fa fa-times-circle-o" style="position: absolute; right: 12px; top: 12px;" data-bind="click: removeOption, visible: $index() > 1"></i>
            </div>
            <!--/ko-->
            <p class="button button-primary" data-bind="click: newOption"><span>New option</span></p>
            <button class="button button-success" data-bind="click: savePoll"><span>Save poll</span></button>
        </form>

    </div>

    <div class="edit-issues">
        <h4>Issues</h4>
    </div>

    <div class="edit-releases">
        <h4>Releases</h4>
    </div>

    <div class="edit-teammamber">
        <h4>Teammembers</h4>
        <input type="text" id="txtUsername" placeholder="Username/Email" data-bind="jqAuto: { value: selectedUser, source: getOptions, labelProp: 'UserName', template: 'rowTmpl' }" /><br/>
        <div data-bind="visible: selectedUser() != ''" style="display: none;">
        <label><input type="checkbox" data-bind="checked: isPageAdmin">User is also page admin</input></label><br/>
            <select class="fill" data-bind="options: roles, optionsText: 'role', value: role"></select><br/>
            </div>
        <button class="button" data-bind="css: { 'button-success': selectedUser() != '' }, click: addUser">Add member</button>
    </div>

    <script id="rowTmpl" type="text/html">
        <a>
            <img class='user-image smaller' data-bind="attr: { 'src': Image }"><strong data-bind="    text: UserName"></strong>&nbsp;<span data-bind="    text: FirstName"></span>&nbsp;<span data-bind="    text: LastName"></span></a>
    </script>


    <div class="modal fade" id="logo-upload" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h3>Upload logo</h3>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm(new { enctype = "multipart/form-data", action = "/Upload" }))
                    {
                        @Html.AntiForgeryToken(); 
                        <input type="file" name="uploadedFile" id="fileupload" /> 
                        <input type="hidden" name="projectId" id="projectId" value="@Model.Id"/>
                    }

                    <div id="progress">
                        <div class="bar" style="width: 0%;"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-danger pull-left" style="width: auto;" value="Remove logo" data-bind="click: removeLogo" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script src="~/Scripts/jquery.ui.widget.js"></script>
    <script src="~/Scripts/jquery.fileupload.js"></script>
    <script src="~/Scripts/jquery.iframe-transport.js"></script>
    <script src="~/Scripts/knockout-jqAutocomplete.min.js"></script>
    <script type="text/javascript">

        var editProjectConfig = {
            fileUpload: $('#fileupload'),
            autocomplete: $("#txtUsername"),
            imageUrl: '@Model.GetLogo()',
            projectId: '@Model.Id'
        };

        var EditModel = function () {
            var priv = {};
            var pub = {};

            pub.Init = function (config) {
                priv.config = config;
                var viewModel = new priv.viewModel();
                viewModel.initFileUpload();
                return viewModel;
            };

            priv.updateLogo = function (data) {
                return $.ajax({
                    method: 'post',
                    url: '/Project/SaveLogo',
                    data: { projectId: data.projectId, url: data.url }
                });
            };

            priv.removeLogo = function (data) {
                return $.ajax({
                    method: 'post',
                    url: '/Project/RemoveLogo',
                    data: { projectId: data.projectId }
                });
            };

            priv.option = function (viewModel) {
                var inner = {};

                inner.title = ko.observable();
                inner.votes = ko.observableArray([]);

                inner.removeOption = function () {
                    if (confirm('Are you sure?'))
                        viewModel.options.remove(this);
                };

                return inner;
            };

            priv.poll = function () {
                var inner = {};
                inner.title = ko.observable();
                inner.options = ko.observableArray([]);

                for (var i = 0; i < 2; i++) {
                    inner.options.push(priv.option(inner));
                }

                inner.newOption = function () {
                    inner.options.push(priv.option(inner));
                };

                inner.savePoll = function () {
                    priv.savePoll(inner).done(function (response) {
                        console.log(response);
                    });
                };

                return inner;
            };

            priv.savePoll = function (data) {
                return $.ajax({
                    url: '/Project/CreatePoll',
                    method: 'post',
                    contentType: 'application/json',
                    data: ko.toJSON({ projectId: priv.config.projectId, Poll: { Title: data.title, Options: data.options } })
                });
            };

            priv.addMember = function (userId, admin, role) {
                return $.ajax({
                    url: '/Project/AddTeamMember',
                    method: 'post',
                    contentType: 'application/json',
                    data: ko.toJSON({ projectId: priv.config.projectId, userId: userId, isAdmin: admin, role: role })
                });
            };

            priv.viewModel = function () {
                var inner = {};

                inner.logoUrl = ko.observable(priv.config.imageUrl);
                inner.projectId = priv.config.projectId;
                inner.updateLogo = function (url) {
                    priv.updateLogo({ projectId: inner.projectId, url: url })
                        .done(function (response) {
                            console.log(response);
                        });
                };

                inner.getOptions = function (searchTerm, callback) {
                    $.ajax({
                        dataType: "json",
                        url: "/User/Search",
                        data: {
                            query: searchTerm
                        },
                    }).done(callback);
                };

                inner.selectedPoll = ko.observable();

                inner.selectedUser = ko.observable('');
                inner.isPageAdmin = ko.observable(false);

                inner.newPoll = function () {
                    inner.selectedPoll(priv.poll());
                };

                inner.addUser = function () {
                    if (!inner.selectedUser()) return false;

                    priv.addMember(inner.selectedUser().UserId, inner.isPageAdmin(), inner.role().id).done(function(response) {
                        console.log(response);
                    });
                };

                inner.removeLogo = function () {
                    if (confirm("Are you sure?"))
                        priv.removeLogo({ projectId: inner.projectId }).done(function (response) {
                            console.log(response);
                        });
                };

                inner.role = ko.observable('');

                inner.roles = ko.observableArray([
                    {
                        role: 'Developer',
                        id: 0
                    },
                    {
                        role: 'Designer',
                        id: 1
                    },
                    {
                        role: 'Administrative',
                        id: 2
                    }
                ]);

                //inner.initAutocomplete = function() {
                //    priv.config.autocomplete.autocomplete({
                //        source: "/User/Search",
                //        minLength: 2,
                //        select: function(event, ui) {
                //            console.log(ui.item ?
                //                "Selected: " + ui.item.value + " aka " + ui.item.id :
                //                "Nothing selected, input was " + this.value);
                //        }
                //    }).data("ui-autocomplete")._renderItem = function(ul, item) {
                //        console.log(item);
                //        return $("<li>")
                //            .data("ui-autocomplete-item", item)
                //            .append("<a><img class='user-image smaller' src='" + item.Image + "'>" + item.UserName + "</a>")
                //            .appendTo(ul);
                //    };
                //};


                inner.initFileUpload = function () {
                    priv.config.fileUpload.fileupload({
                        // Only submit the file if it is jpg file
                        add: function (e, data) {
                            var goUpload = true;
                            var uploadFile = data.files[0];
                            // Only allow JPG files
                            if (!(/\.(jpg)$/i).test(uploadFile.name)) {
                                alert("Incorrect file format. Please try again.");
                                goUpload = false;
                            }
                            if (goUpload == true) {
                                data.submit();
                            }
                        },
                        type: 'post',
                        // Handles the server side validation on file type
                        done: function (e, data) {
                            var response = JSON.parse(data.result);
                            console.log(response);
                            if (response.statusCode == 200) {
                                var logoUrl = '/Uploads/' + response.file;
                                inner.logoUrl(logoUrl);
                                inner.updateLogo(logoUrl);
                            }
                        },
                        progressall: function (e, data) {
                            // Handle the progress bar
                            var progress = parseInt(data.loaded / data.total * 100, 10);
                            $('#progress .bar').css(
                                'width',
                                progress + '%'
                            );
                        }
                    });
                };

                return inner;
            };

            return pub;
        }();


        $(function () {
            ko.applyBindings(new EditModel.Init(editProjectConfig), document.getElementById("edit-project-wrapper"));
        });
    </script>

}
