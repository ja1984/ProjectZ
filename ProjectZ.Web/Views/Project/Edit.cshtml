@using System.Web.Script.Serialization
@model ProjectZ.Web.Models.ViewModels.EditProjectViewModel
@{
    ViewBag.Title = "Edit";
}

<div id="edit-project-wrapper">


    <div class="row">
        <div class="col-lg-12 margin margin-bottom-15">
            <h2>
                <div class="project-logo dropzone" data-toggle="modal" data-target="#logo-upload" id="dropzone-logo">
                    <img src="@Model.Project.GetLogo()" alt="@Model.Project.Name" title="@Model.Project.Name" class="user-image" data-bind="attr: { 'src': logoUrl }">
                    <i class="fa fa-upload fa-1x"></i>
                </div>

                @Model.Project.Name
            </h2>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-9">

            <div class="edit-description" data-bind="visible: selectedPage() == 'description'">
                @Html.Partial("Partials/Project/Edit/Description", Model.Project)
            </div>

            <div class="edit-polls" data-bind="visible: selectedPage() == 'polls'" style="display: none;">
                @Html.Partial("Partials/Project/Edit/Polls", Model.Project.Polls)
            </div>

            <div class="edit-issues" data-bind="visible: selectedPage() == 'issues'" style="display: none;">
                @Html.Partial("Partials/Project/Edit/Issues", Model.Project.Issues)
            </div>

            <div class="edit-releases" data-bind="visible: selectedPage() == 'releases'" style="display: none;">
                @Html.Partial("Partials/Project/Edit/Releases", Model)
            </div>
            <div class="edit-teammamber" data-bind="visible: selectedPage() == 'team'" style="display: none;">
                @Html.Partial("Partials/Project/Edit/Team", Model.Project.Admins)
            </div>
            <div class="edit-questions" data-bind="visible: selectedPage() == 'questions'" style="display: none;">
                @Html.Partial("Partials/Project/Edit/Questions", Model.Project.Questions)
            </div>
            <div class="edit-questions" data-bind="visible: selectedPage() == 'images'" style="display: none;">
                @Html.Partial("Partials/Project/Edit/Images", Model.Project.Questions)
            </div>
            <div class="edit-questions" data-bind="visible: selectedPage() == 'settings'" style="display: none;">
                @Html.Partial("Partials/Project/Edit/Images", Model.Project.Questions)
            </div>

        </div>
        <div class="col-lg-3 side-bar">
            <div class="panel panel-default">
                <div class="panel-body">

                    <ul class="projects unstyled">
                        <a href="/projects/65/test" data-bind="css: { 'active': selectedPage() == 'description' }, click: changePage" data-page="description">
                            <li>Description</li>
                        </a>
                        <a href="/projects/65/test" data-bind="css: { 'active': selectedPage() == 'team' }, click: changePage" data-page="team">
                            <li>Team members</li>
                        </a>
                        <a href="/projects/65/test" data-bind="css: { 'active': selectedPage() == 'releases' }, click: changePage" data-page="releases">
                            <li>Releases</li>
                        </a>
                        <a href="/projects/65/test" data-bind="css: { 'active': selectedPage() == 'polls' }, click: changePage" data-page="polls">
                            <li>Polls</li>
                        </a>
                        <a href="/projects/65/test" data-bind="css: { 'active': selectedPage() == 'issues' }, click: changePage" data-page="issues">
                            <li>Issues</li>
                        </a>
                        <a href="/projects/65/test" data-bind="css: { 'active': selectedPage() == 'questions' }, click: changePage" data-page="questions">
                            <li>Questions</li>
                        </a>
                        <a href="/projects/65/test" data-bind="css: { 'active': selectedPage() == 'images' }, click: changePage" data-page="images">
                            <li>Images</li>
                        </a>
                        <a href="/projects/65/test" data-bind="css: { 'active': selectedPage() == 'settings' }, click: changePage" data-page="settings">
                            <li>Settings</li>
                        </a>
                    </ul>
                </div>
            </div>
        </div>
    </div>




    <script id="rowTmpl" type="text/html">
        <a>
            <img class='user-image smaller' data-bind="attr: { 'src': Image }"><strong data-bind="    text: UserName"></strong>&nbsp;<span data-bind="    text: FirstName"></span>&nbsp;<span data-bind="    text: LastName"></span></a>
    </script>


    <div class="modal fade" id="logo-upload" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h3>Upload logo</h3>
                </div>
                <div class="modal-body">

                    <form id="projectImages" action="/Image/UploadLogo?enctype=multipart%2Fform-data" method="POST" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <input type="file" name="uploadedFile" id="fileupload" />
                        <input type="hidden" name="projectId" id="projectId" value="@Model.Project.Id"/>
                    </form>
                    <p class="text-muted">Recommended size: 104 x 104px</p>
                    <div id="progress">
                        <div class="bar" style="width: 0%;"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="button button-error pull-left" style="width: auto;" data-bind="click: removeLogo"><span>Remove logo</span></button>
                    <button type="button" class="button" data-dismiss="modal"><span>Close</span></button>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script src="~/Scripts/jquery.ui.widget.js"></script>
    <script src="~/Scripts/jquery.fileupload.js"></script>
    <script src="~/Scripts/jquery.iframe-transport.js"></script>
    <script src="~/Scripts/knockout-jqAutocomplete.min.js"></script>

    <script src="~/Scripts/Project/base.js"></script>
    <script src="~/Scripts/Project/Questions.js"></script>
    <script src="~/Scripts/Project/Overview.js"></script>
    <script src="~/Scripts/Project/Releases.js"></script>
    <script src="~/Scripts/Project/Team.js"></script>
    <script src="~/Scripts/Project/Images.js"></script>
    <script type="text/javascript">



        var editProjectConfig = {
            fileUpload: $('#fileupload'),
            releaseImages: $('#releaseImages'),
            dropZone: $('#dropZone'),
            autocomplete: $("#txtUsername"),
            imageUrl: '@Model.Project.GetLogo()',
            projectId: '@Model.Project.Id',
            startPage: '@Model.StartPage',
            url: 'http://@(HttpContext.Current.Request.Url.Authority)/@(Model.Project.Id)/@(Model.Project.Slug)/edit',
            data: @Html.Raw(new JavaScriptSerializer().Serialize(Model.Project)),
            releases: @Html.Raw(new JavaScriptSerializer().Serialize(Model.Releases))
            
            };

        var EditModel = function () {
            var priv = {};
            var pub = {};

            pub.Init = function (config) {
                priv.config = config;
                var viewModel = new priv.viewModel();
                viewModel.initFileUpload();
                viewModel.InitHistory();
                viewModel.initDeleteMethods();
                viewModel.initEvents();
                return viewModel;
            };

            priv.removeLogo = function (data) {
                return $.ajax({
                    method: 'post',
                    url: '/Image/RemoveLogo',
                    data: { projectId: data.projectId }
                });
            };

            priv.option = function (viewModel) {
                var inner = {};

                inner.title = ko.observable();
                inner.votes = ko.observableArray([]);

                inner.removeOption = function () {
                    if (confirm('Are you sure?'))
                        viewModel.options.remove(this);
                };

                return inner;
            };

            priv.poll = function () {
                var inner = {};
                inner.title = ko.observable();
                inner.options = ko.observableArray([]);

                for (var i = 0; i < 2; i++) {
                    inner.options.push(priv.option(inner));
                }

                inner.newOption = function () {
                    inner.options.push(priv.option(inner));
                };

                inner.savePoll = function () {
                    priv.savePoll(inner).done(function (response) {
                        if (response.success)
                            location.reload();
                    });
                };

                return inner;
            };

            priv.savePoll = function (data) {
                return $.ajax({
                    url: '/Project/CreatePoll',
                    method: 'post',
                    contentType: 'application/json',
                    data: ko.toJSON({ projectId: priv.config.projectId, Poll: { Title: data.title, Options: data.options } })
                });
            };

            priv.deletePoll = function (pollId) {
                return $.ajax({
                    url: '/Project/DeletePoll',
                    method: 'post',
                    contentType: 'application/json',
                    data: ko.toJSON({ projectId: priv.config.projectId, pollId: pollId })
                });
            };

            

            priv.viewModel = function () {
                var inner = {};

                inner.selectedPage = ko.observable(priv.config.startPage);
                inner.changePage = function (a, b, c) {
                    var newPage = $(b.currentTarget).attr('data-page');
                    if (newPage === inner.selectedPage()) return false;
                    history.pushState(newPage, 'test', priv.config.url + '/' + newPage);
                    inner.selectedPage(newPage);
                };

                inner.questionModel = new questionModel().Init(priv.config.data, inner, priv.config);
                inner.overviewModel = new overviewModel().Init(priv.config.data, inner, priv.config);
                inner.releaseModel = new releaseModel().Init({releases: priv.config.releases, issues: priv.config.data.Issues}, inner, priv.config);
                inner.teamModel = new teamModel().Init(priv.config.data.Admins, inner, priv.config);
                inner.imageModel = new imageModel().Init(priv.config.data, inner, priv.config);
                
                inner.showNewRelease = ko.observable(false);
                inner.newRelease = function() {
                    inner.showNewRelease(true);
                    history.pushState('new', 'test', priv.config.url + '/release/new');
                };
                inner.InitHistory = function () {
                    window.addEventListener('popstate', function (event) {
                        inner.selectedPage(event.state);
                    });
                };

                inner.logoUrl = ko.observable(priv.config.imageUrl);
                inner.projectId = priv.config.projectId;             

                inner.initDeleteMethods = function () {
                    $(".poll .delete").on('click', function () {
                        if (!confirm('Are you sure?')) return;
                        var pollId = $(this).attr('data-poll-id');
                        if (pollId)
                            priv.deletePoll(pollId).done(function (response) {
                                if (response.success)
                                    location.reload();
                            });
                    });

                    $(".member .delete").on('click', function () {
                        if (!confirm('Are you sure?')) return;
                        var userId = $(this).attr('data-user-id');
                        console.log(userId);
                        if (userId)
                            priv.deleteMember(userId).done(function (response) {
                                if (response.success)
                                    location.reload();
                            });
                    });
                };

                inner.selectedPoll = ko.observable();

                
                

                inner.newPoll = function () {
                    inner.selectedPoll(priv.poll());
                };

                

                inner.removeLogo = function () {
                    if (confirm("Are you sure?"))
                        priv.removeLogo({ projectId: inner.projectId }).done(function (response) {
                            console.log(response);
                        });
                };


                inner.initEvents = function() {
                    $(document).bind('dragover', function (e) {
                        var dropZone = $('.dropzone'),
                            foundDropzone,
                            timeout = window.dropZoneTimeout;
                        if (!timeout) {
                            dropZone.addClass('in');
                        }
                        else {
                            clearTimeout(timeout);
                        }
                        var found = false,
                        node = e.target;

                        do {

                            if ($(node).hasClass('dropzone')) {
                                found = true;
                                foundDropzone = $(node);
                                break;
                            }

                            node = node.parentNode;

                        } while (node != null);

                        dropZone.removeClass('in hover');

                        if (found) {
                            foundDropzone.addClass('hover');
                        }

                        window.dropZoneTimeout = setTimeout(function () {
                            window.dropZoneTimeout = null;
                            dropZone.removeClass('in hover');
                        }, 100);
                    });
                };
                

                inner.initFileUpload = function () {
                    priv.config.fileUpload.fileupload({
                        // Only submit the file if it is jpg file
                        dropZone: $("#dropzone-logo"),
                        add: function (e, data) {
                            var goUpload = true;
                            var uploadFile = data.files[0];
                            // Only allow JPG files
                            if (!(/\.(jpg|png)$/i).test(uploadFile.name)) {
                                alert("Incorrect file format. Please try again.");
                                goUpload = false;
                            }
                            if (goUpload == true) {
                                data.submit();
                            }
                        },
                        type: 'post',
                        // Handles the server side validation on file type
                        done: function (e, data) {
                            var response = JSON.parse(data.result);
                            var logo = response.logo;
                                
                            if (response.success) {
                                inner.logoUrl(logo);
                            }
                        },
                        progressall: function (e, data) {
                            // Handle the progress bar
                            var progress = parseInt(data.loaded / data.total * 100, 10);
                            $('#progress .bar').css(
                                'width',
                                progress + '%'
                            );
                        }
                    });
                };

                return inner;
            };

            return pub;
        }();


        $(function () {
            ko.applyBindings(new EditModel.Init(editProjectConfig), document.getElementById("edit-project-wrapper"));
        });
    </script>

}
